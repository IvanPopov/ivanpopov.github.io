{"version":3,"sources":["webpack:///./src/sandbox/containers/editor/hlsl.ts"],"names":[],"mappings":"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","file":"0.1bee66c087c052c01324.bundle.js","sourcesContent":["'use strict';\nimport * as monaco from 'monaco-editor';\n\nimport IRichLanguageConfiguration = monaco.languages.LanguageConfiguration;\nimport ILanguage = monaco.languages.IMonarchLanguage;\n\nexport const conf: IRichLanguageConfiguration = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '[', close: ']' },\n        { open: '{', close: '}' },\n        { open: '(', close: ')' },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*#pragma\\\\s+region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#pragma\\\\s+endregion\\\\b\")\n        }\n    }\n};\n\n// tslint:disable-next-line:no-object-literal-type-assertion\nexport const language = <ILanguage>{\n    defaultToken: '',\n    tokenPostfix: '.hlsl',\n\n    brackets: [\n        { token: 'delimiter.curly', open: '{', close: '}' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\n        { token: 'delimiter.square', open: '[', close: ']' },\n        { token: 'delimiter.angle', open: '<', close: '>' }\n    ],\n\n    keywords: [\n        'AppendStructuredBuffer',\n        'auto',\n        'bool',\n        'break',\n        'case',\n        'const',\n        'continue',\n        'compile',\n        'column_major',\n        'decltype',\n        'default',\n        'do',\n        'discard',\n        'decl',\n        'else',\n        'enum',\n        'extern',\n        'false',\n        'float',\n        'float2',\n        'float3',\n        'float4',\n        'for',\n        'half',\n        'if',\n        'in',\n        'inout',\n        'inline',\n        'int',\n        'int2',\n        'int3',\n        'int4',\n        'int64',\n        'matrix',\n        'new',\n        'out',\n        'pass',\n        'provide',\n        'row_major',\n        'register',\n        'restrict',\n        'return',\n        'RWBuffer',\n        'RWStructuredBuffer',\n        'sampler',\n        'sampler1D',\n        'sampler2D',\n        'sampler3D',\n        'static',\n        'string',\n        'struct',\n        'switch',\n        'technique',\n        'true',\n        'texture',\n        'texture1D',\n        'texture2D',\n        'texture3D',\n        'textureCube',\n        'typedef',\n        'union',\n        'unsigned',\n        'uint',\n        'uint2',\n        'uint3',\n        'uint4',\n        'uint64',\n        'uniform',\n        'vector',\n        'void',\n        'while',\n\n        'asm',\n\n\n        // partFX\n        'partFx',\n        'spawn'\n    ],\n\n    operators: [\n        '=', '>', '<', '!', '~', '?', ':',\n        '==', '<=', '>=', '!=', '&&', '||', '++', '--',\n        '+', '-', '*', '/', '&', '|', '^', '%', '<<',\n        '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\n        '^=', '%=', '<<=', '>>=', '>>>='\n    ],\n\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n    floatsuffix: /[fFlL]?/,\n    encoding: /u|u8|U|L/,\n\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // C++ 11 Raw String\n            [/@encoding?R\\\"(?:([^ ()\\\\\\t]*))\\(/, { token: 'string.raw.begin', next: '@raw.$1' }],\n\n            // identifiers and keywords\n            [/[a-zA-Z_]\\w*/, {\n                cases: {\n                    '@keywords': { token: 'keyword.$0' },\n                    '@default': 'identifier'\n                }\n            }],\n\n            // whitespace\n            { include: '@whitespace' },\n\n            // [[ attributes ]].\n            [/\\[\\[.*\\]\\]/, 'annotation'],\n\n            [/^\\s*#include/, { token: 'keyword.directive.include', next: '@include' }],\n\n            // Preprocessor directive\n            [/^\\s*#\\s*\\w+/, 'keyword'],\n\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, {\n                cases: {\n                    '@operators': 'delimiter',\n                    '@default': ''\n                }\n            }],\n\n            // numbers\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n            [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n            [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n            [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n            [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n            [/\\d(@integersuffix)/, 'number'],\n\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],  // non-teminated string\n            [/\"/, 'string', '@string'],\n\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ],\n\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        //Identical copy of comment above, except for the addition of .doc\n        doccomment: [\n            [/[^\\/*]+/, 'comment.doc'],\n            [/\\*\\//, 'comment.doc', '@pop'],\n            [/[\\/*]/, 'comment.doc']\n        ],\n\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n\n        raw: [\n            [/(.*)(\\))(?:([^ ()\\\\\\t]*))(\\\")/, {\n                cases: {\n                    '$3==$S2': ['string.raw', 'string.raw.end', 'string.raw.end', { token: 'string.raw.end', next: '@pop' }],\n                    '@default': ['string.raw', 'string.raw', 'string.raw', 'string.raw']\n                }\n            }\n            ],\n            [/.*/, 'string.raw']\n        ],\n\n        include: [\n            [/(\\s*)(<)([^<>]*)(>)/, ['', 'keyword.directive.include.begin', 'string.include.identifier', { token: 'keyword.directive.include.end', next: '@pop' }]],\n            [/(\\s*)(\")([^\"]*)(\")/, ['', 'keyword.directive.include.begin', 'string.include.identifier', { token: 'keyword.directive.include.end', next: '@pop' }]]\n        ]\n    }\n};\n"],"sourceRoot":""}